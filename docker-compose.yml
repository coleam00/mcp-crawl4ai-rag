services:
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "8051:8051"
    volumes:
      - ./init-schema.sh:/app/init-schema.sh:ro
      - ./crawled_pages.sql:/app/crawled_pages.sql:ro
    environment:
      # MCP Server Configuration
      HOST: "0.0.0.0"
      PORT: "8051"
      TRANSPORT: "sse"
      
      # OpenAI Configuration
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      MODEL_CHOICE: "${MODEL_CHOICE:-gpt-4o-mini}"
      
      # RAG Strategies
      USE_CONTEXTUAL_EMBEDDINGS: "${USE_CONTEXTUAL_EMBEDDINGS:-false}"
      USE_HYBRID_SEARCH: "${USE_HYBRID_SEARCH:-false}"
      USE_AGENTIC_RAG: "${USE_AGENTIC_RAG:-false}"
      USE_RERANKING: "${USE_RERANKING:-false}"
      USE_KNOWLEDGE_GRAPH: "${USE_KNOWLEDGE_GRAPH:-true}"
      
      # Supabase Configuration (Remote)
      SUPABASE_URL: "${SUPABASE_URL}"
      SUPABASE_SERVICE_KEY: "${SUPABASE_SERVICE_KEY}"
      
      # Neo4j Configuration (Local Container)
      NEO4J_URI: "bolt://neo4j:7687"
      NEO4J_USER: "neo4j"
      NEO4J_PASSWORD: "${NEO4J_PASSWORD}"
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - crawl4ai-network
    restart: unless-stopped
    command: bash -c "bash /app/init-schema.sh && python src/crawl4ai_mcp.py"

  neo4j:
    image: neo4j:5-community
    ports:
      - "7474:7474"  # Browser interface
      - "7687:7687"  # Bolt protocol
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_conf:/conf
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      # Updated configuration settings for Neo4j 5.x
      - NEO4J_server_memory_heap_initial__size=512m
      - NEO4J_server_memory_heap_max__size=1G
      - NEO4J_server_memory_pagecache_size=512m
      - NEO4J_server_http_listen__address=0.0.0.0:7474
      - NEO4J_server_bolt_listen__address=0.0.0.0:7687
      - NEO4J_db_transaction_timeout=60s
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    healthcheck:
      test: ["CMD-SHELL", "neo4j status || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - crawl4ai-network
    restart: unless-stopped

networks:
  crawl4ai-network:
    driver: bridge
    name: crawl4ai-network

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_conf:
    driver: local