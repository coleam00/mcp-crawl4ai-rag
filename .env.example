# The transport for the MCP server - either 'sse' or 'stdio' (defaults to sse if left empty)
# For Docker Compose, this will be automatically set to 'sse'
TRANSPORT=sse

# Host to bind to if using sse as the transport (leave empty if using stdio)
# Set this to 0.0.0.0 if using Docker, otherwise set to localhost (if using uv)
# For Docker Compose, this will be automatically set to '0.0.0.0'
HOST=0.0.0.0

# Port to listen on if using sse as the transport (leave empty if using stdio)
# For Docker Compose, this will be automatically set to '8051'
PORT=8051

# Get your Open AI API Key by following these instructions -
# https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key
# This is for the embedding model - text-embed-small-3 will be used
OPENAI_API_KEY=

# The LLM you want to use for summaries and contextual embeddings
# Generally this is a very cheap and fast LLM like gpt-4o-mini
MODEL_CHOICE=gpt-4o-mini

# RAG strategies - set these to "true" or "false" (default to "false")
# USE_CONTEXTUAL_EMBEDDINGS: Enhances embeddings with contextual information for better retrieval
USE_CONTEXTUAL_EMBEDDINGS=false

# USE_HYBRID_SEARCH: Combines vector similarity search with keyword search for better results
USE_HYBRID_SEARCH=false

# USE_AGENTIC_RAG: Enables code example extraction, storage, and specialized code search functionality
USE_AGENTIC_RAG=false

# USE_RERANKING: Applies cross-encoder reranking to improve search result relevance
USE_RERANKING=false

# USE_KNOWLEDGE_GRAPH: Enables AI hallucination detection and repository parsing tools using Neo4j
# If you set this to true, you must also set the Neo4j environment variables below.
# For Docker Compose, this will be automatically set to 'true'
USE_KNOWLEDGE_GRAPH=true

# For the Supabase version (sample_supabase_agent.py), set your Supabase URL and Service Key.
# Get your SUPABASE_URL from the API section of your Supabase project settings -
# https://supabase.com/dashboard/project/<your project ID>/settings/api
SUPABASE_URL=

# Get your SUPABASE_SERVICE_KEY from the API section of your Supabase project settings -
# https://supabase.com/dashboard/project/<your project ID>/settings/api
# On this page it is called the service_role secret.
SUPABASE_SERVICE_KEY=

# Neo4j Configuration for Knowledge Graph Tools
# These are required for the AI hallucination detection and repository parsing tools
# Leave empty to disable knowledge graph functionality

# Neo4j connection URI - use bolt://localhost:7687 for local, neo4j:// for cloud instances
# IMPORTANT: If running the MCP server through Docker, change localhost to host.docker.internal
# For Docker Compose, this will be automatically set to 'bolt://neo4j:7687'
NEO4J_URI=bolt://localhost:7687

# Neo4j username (usually 'neo4j' for default installations)
# For Docker Compose, this will be automatically set to 'neo4j'
NEO4J_USER=neo4j

# Neo4j password for your database instance
# REQUIRED: Set this to a secure password for your Neo4j database
NEO4J_PASSWORD=your_secure_password_here

# ========================================
# DOCKER COMPOSE USAGE INSTRUCTIONS
# ========================================
# 
# To use this project with Docker Compose:
# 1. Copy this file to .env: cp .env.example .env
# 2. Edit .env and set your actual values for:
#    - OPENAI_API_KEY (required)
#    - SUPABASE_URL (required)
#    - SUPABASE_SERVICE_KEY (required)
#    - NEO4J_PASSWORD (required - set to a secure password)
# 3. Create Neo4j directories: mkdir -p neo4j/data neo4j/logs
# 4. Run: docker compose up --build
# 
# The following variables are automatically configured for Docker Compose:
# - TRANSPORT=sse
# - HOST=0.0.0.0
# - PORT=8051
# - USE_KNOWLEDGE_GRAPH=true
# - NEO4J_URI=bolt://neo4j:7687
# - NEO4J_USER=neo4j
# 
# Access points after startup:
# - MCP Server: http://localhost:8051
# - Neo4j Browser: http://localhost:7474
# - Neo4j Bolt: bolt://localhost:7687