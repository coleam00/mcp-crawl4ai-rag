name: Deploy to PyPI

on:
  release:
    types: [created, published]
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment target'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.target || (github.event.action == 'published' && 'pypi' || 'testpypi') }}
      url: ${{ steps.deployment.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install build dependencies
      run: |
        uv pip install --system build twine

    - name: Verify version consistency
      run: |
        # Extract version from pyproject.toml
        PYPROJECT_VERSION=$(python -c "
        import tomli
        with open('pyproject.toml', 'rb') as f:
            config = tomli.load(f)
        print(config['project']['version'])
        ")
        
        # Extract version from git tag (if available)
        if [ "${{ github.event_name }}" = "release" ]; then
          TAG_VERSION="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          TAG_VERSION=${TAG_VERSION#v}
          
          if [ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "‚ùå Version mismatch: pyproject.toml ($PYPROJECT_VERSION) != tag ($TAG_VERSION)"
            exit 1
          fi
          echo "‚úÖ Version consistency verified: $PYPROJECT_VERSION"
        else
          echo "‚úÖ Manual deployment - using version: $PYPROJECT_VERSION"
        fi
        
        echo "PACKAGE_VERSION=$PYPROJECT_VERSION" >> $GITHUB_ENV

    - name: Build package
      run: |
        python -m build --wheel --sdist --outdir dist/
        
        # Verify build artifacts
        echo "üì¶ Built packages:"
        ls -la dist/
        
        # Basic package validation
        python -m twine check dist/*

    - name: Determine deployment target
      id: target
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TARGET="${{ github.event.inputs.target }}"
        elif [ "${{ github.event.action }}" = "published" ]; then
          TARGET="pypi"
        else
          TARGET="testpypi"
        fi
        
        echo "target=$TARGET" >> $GITHUB_OUTPUT
        echo "üéØ Deployment target: $TARGET"

    - name: Deploy to TestPyPI
      if: steps.target.outputs.target == 'testpypi'
      id: deploy-testpypi
      run: |
        python -m twine upload \
          --repository testpypi \
          --username __token__ \
          --password ${{ secrets.TEST_PYPI_TOKEN }} \
          --verbose \
          dist/*
        
        PACKAGE_URL="https://test.pypi.org/project/crawl4ai-mcp/${{ env.PACKAGE_VERSION }}/"
        echo "url=$PACKAGE_URL" >> $GITHUB_OUTPUT
        echo "üöÄ Deployed to TestPyPI: $PACKAGE_URL"

    - name: Deploy to PyPI
      if: steps.target.outputs.target == 'pypi'
      id: deploy-pypi
      run: |
        python -m twine upload \
          --repository pypi \
          --username __token__ \
          --password ${{ secrets.PYPI_TOKEN }} \
          --verbose \
          dist/*
        
        PACKAGE_URL="https://pypi.org/project/crawl4ai-mcp/${{ env.PACKAGE_VERSION }}/"
        echo "url=$PACKAGE_URL" >> $GITHUB_OUTPUT
        echo "üöÄ Deployed to PyPI: $PACKAGE_URL"

    - name: Set deployment output
      id: deployment
      run: |
        if [ "${{ steps.target.outputs.target }}" = "pypi" ]; then
          echo "url=${{ steps.deploy-pypi.outputs.url }}" >> $GITHUB_OUTPUT
        else
          echo "url=${{ steps.deploy-testpypi.outputs.url }}" >> $GITHUB_OUTPUT
        fi

    - name: Test installation from TestPyPI
      if: steps.target.outputs.target == 'testpypi'
      run: |
        echo "üß™ Testing installation from TestPyPI..."
        
        # Wait a moment for package to be available
        sleep 30
        
        # Create a temporary virtual environment for testing
        python -m venv test_env
        source test_env/bin/activate
        
        # Install from TestPyPI with fallback to PyPI for dependencies
        pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple/ \
          crawl4ai-mcp==${{ env.PACKAGE_VERSION }}
        
        # Test basic import
        python -c "
        import crawl4ai_mcp
        print('‚úÖ Package imported successfully')
        if hasattr(crawl4ai_mcp, 'main'):
            print('‚úÖ Main function exists')
        else:
            print('‚ùå Main function not found')
            exit(1)
        "
        
        # Test entry point
        which mcp-crawl4ai-rag || echo "‚ö†Ô∏è  Entry point not in PATH"
        
        deactivate
        rm -rf test_env

    - name: Create GitHub deployment
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: '${{ steps.target.outputs.target }}',
            description: 'Deploy crawl4ai-mcp v${{ env.PACKAGE_VERSION }} to ${{ steps.target.outputs.target }}',
            auto_merge: false,
            required_contexts: []
          });

          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: '${{ steps.deployment.outputs.url }}',
            description: 'Successfully deployed to ${{ steps.target.outputs.target }}'
          });

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-${{ env.PACKAGE_VERSION }}
        path: dist/*
        retention-days: 30

  post-deploy-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: needs.deploy.result == 'success'
    
    steps:
    - name: Wait for package propagation
      run: |
        echo "‚è≥ Waiting for package to propagate..."
        sleep 60

    - name: Test public installation
      run: |
        TARGET="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.target || (github.event.action == 'published' && 'pypi' || 'testpypi') }}"
        
        if [ "$TARGET" = "testpypi" ]; then
          echo "üß™ Testing installation from TestPyPI..."
          pip install \
            --index-url https://test.pypi.org/simple/ \
            --extra-index-url https://pypi.org/simple/ \
            crawl4ai-mcp
        else
          echo "üß™ Testing installation from PyPI..."
          pip install crawl4ai-mcp
        fi
        
        # Test basic functionality
        python -c "
        import crawl4ai_mcp
        print('‚úÖ Package installed and imported successfully from $TARGET')
        "
        
        # Test CLI availability
        mcp-crawl4ai-rag --help || echo "‚ö†Ô∏è  CLI test skipped (may require additional setup)"
